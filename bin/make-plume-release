#!/bin/bash

# Script that creates a plume-lib release.
# It also adds tags to the repository.

# If you just want to make plume.jar for your own use, then instead use one of:
#   make jar
#   make JAVAC_TARGET_FLAGS="-target 7" jar
#   make JAVAC_TARGET_FLAGS="-target 7" ALWAYS_CHECK_TYPES=1 clean jar
# You can also find a pre-built plume.jar in the plume-lib release, in a
# file such as plume-lib-1.0.0/java/plume.jar .

# User customization
GITHUB_TOKEN=`cat $HOME/private/github-plume-lib-token`
GITHUB_USER=mernst

GITHUB_REPO=plume-lib
pkg=${GITHUB_REPO}

# Argument processing
script=$(basename $0)
new=$1

if [[ -z $new ]]; then
    echo "Usage: $script new-version-number"
    echo "For example: $script 1.2"
    exit 1
fi

if ! git status 2>&1 > /dev/null; then
    echo "$PWD is not a Git repository."
fi

if ! git diff --exit-code; then
    echo "Unstaged local changes; stage, commit, and push changes before making a release."
    exit 1
fi

if ! git diff --cached --exit-code; then
    echo "Staged but uncommited local changes; stage and push changes before making a release."
    exit 1
fi

if ! git log --branches --not --remotes &> /dev/null; then
    echo "Unpushed changes; push changes before making a release."
    exit 1
fi

if [[ ! $(${JAVAC-"javac"} -version 2>&1) =~ "jsr308" ]]; then
    echo "Please use the JSR 308 compiler to make a release."
    exit 1
fi

echo "Going to release version $new of $pkg."
echo -n "Is this correct? [y/n]: "
read answer

ans=${answer:0:1}
if [[ ! ($ans = "y" || $ans = "Y") ]]; then
    exit 1
fi

release="$pkg-$new"
release_tar="$release.tar.gz"

echo "[1/6] Creating tag 'v$new'."
if ! git tag v$new &> /dev/null; then
    echo "Failed to create Git tag 'v$new'."
    echo "Run 'git tag' to check if the tag already exists."
    exit 1
fi

echo "[2/6] Running 'git archive'."
if ! git clone . "$release"; then
    echo "Error running 'git clone'."
    exit 1
fi

echo "[3/6] Building plume-lib."
export JAVAC_TARGET_FLAGS="-target 7"
make -C "$release/java" ALWAYS_CHECK_TYPES=1 all
if [[ $? -ne 0 ]]; then
    echo "Error building plume-lib."
    exit 1;
fi

echo "[4/6] Performing post-build clean up."
make -C "$release" release-clean
if [[ $? -ne 0 ]]; then
    echo "Error running 'make release-clean'."
    exit 1;
fi

echo "[5/6] Creating release archive: $release_tar"
tar czf "$release_tar" --owner=0 --group=0 "$release"

echo "[6/6] Cleaning up."
rm -rf "$release"

done_release() {
    echo ""
    echo "Script complete."
    echo "To finalize the release, perform the following steps manually:"
    echo "* Push the newly created tag by running:  git push --tags"
    if ! $uploaded; then
        echo "* Make a new release on GitHub:"
        echo "   * browse to https://github.com/mernst/plume-lib/releases/new"
        echo "   * tag is: v$new"
        echo "   * Release title is: plume-lib version $new"
        echo "   * description from docs/changelog.txt, with hard line breaks removed"
        echo "   * attach ${PWD}${release_tar}"
    fi
    exit 0
}

uploaded=false

## TODO: convert this for GitHub
# echo ""
# echo -n "Attempt to upload release to Google Code? [y/n]: "
# read answer
#
# ans=${answer:0:1}
# if [[ ! ($ans = "y" || $ans = "Y") ]]; then
#     done_release
# fi
#
# if ! which googlecode_upload.py &> /dev/null; then
#     echo "Could not find googlecode_upload.py in PATH."
#     done_release
# fi
#
# googlecode_upload.py \
#     --summary "Plume-lib v$new release" \
#     --project "plume-lib" \
#     --labels "Type-Source" \
#     "$release_tar"
#
# if [[ $? -ne 0 ]] ; then
#     echo "Uploading to Google Code failed."
#     done_release
# fi
#
# uploaded=true
# echo "Uploaded $release_tar to Google Code successfully."

done_release
