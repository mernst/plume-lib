#!/usr/bin/perl -n
# retarget-hevea-crossrefs
# Michael Ernst
# Last updated: July 31, 2010

# To use:
#   hevea-retarget-crossrefs < orig.html > new.html

# This script replaces HTML cross-references of the form
#    <a href="#htoc1">
# by cross-refenences to named labels, such as
#    <a href="#introduction">

# In the table of contents, Hevea creates HTML cross-references that use
# Hevea-generated labels of the form "htoc99", even when a \label already
# exists.  This leads to users following a link from the table of contents,
# then bookmarking or publicizing that link.  The "htoc99" link may point
# to a completely different section if the manual is reordered or even if a
# new section is added.  So, it is better for webpages not to contain the
# easy-to-misuse "htoc99" cross-references.


# This script does not work with in-place editing (perl's -i argument).

# use strict;
# use English;
# $WARNING = 1;

$debug = 0;
# $debug = 1;

# if (scalar(@ARGV) != 1) {
#   die "Expected exactly 1 argument, got " . scalar(@ARGV);
# }
# my $filename = $ARGV[0];

push @lines, $_;

END {

  for (my $i = 0; $i<scalar(@lines); $i++) {
    if ($lines[$i] =~ s:<A NAME="(htoc[0-9]+)">(((Chapter&#XA0;)?([0-9]+|[A-Z]))(\.[0-9]+)*)</A>(.*<A NAME="(.*)"></A></H[0-9]+>):$2$7:) {
      $mapping{$1} = $8;
      if ($debug) { print STDERR "$1 => $mapping{$1}\n";
      }
    }
  }

  foreach my $line (@lines) {
    if ($line =~ /<A HREF="#(htoc[0-9]+)">/) {
      my $htoc = $1;
      my $replacement = $mapping{$htoc};
      if (defined($replacement)) {
        if ($debug) { print STDERR $line; }
        # Also remove "Chapter" if present, for brevity
        $line =~ s/$htoc(">)(Chapter&#XA0;)?/$replacement$1/;
        if ($debug) { print STDERR $line; }
      } else {
        print STDERR "No symbolic name for section $htoc\n";
      }
    }
    print $line;
  }

}

# Local Variables:
# time-stamp-start: "^# Last updated: "
# time-stamp-end: "\\.?$"
# time-stamp-format: "%:b %:d, %:y"
# time-stamp-line-limit: 10
# End:
