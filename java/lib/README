These libraries are included in plume-lib and in the plume.jar file in
order to make plume-lib self-contained.  (They do make it large, though.)

Most libraries are standard, downloaded from their respective webpages:

backport-util-concurrent-3.1.jar : (used by ical4j) https://sourceforge.net/projects/backport-jsr166/files/backport-jsr166/
bcel.jar : see below
checker-qual-2.1.1.jar : http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22checker-qual%22
commons-codec-1.10.jar : https://commons.apache.org/proper/commons-codec/
commons-io-2.5.jar : https://commons.apache.org/proper/commons-io/download_io.cgi
commons-lang3-3.4.jar : https://commons.apache.org/proper/commons-lang/
commons-lang-2.6.jar : https://commons.apache.org/proper/commons-lang/
commons-logging-1.2.jar : https://commons.apache.org/proper/commons-logging/
guava-19.0.jar : https://github.com/google/guava/releases
hamcrest-core-1.3.jar : http://search.maven.org/#search|ga|1|g%3Aorg.hamcrest
ical4j-1.0.6.jar : https://sourceforge.net/projects/ical4j/files/iCal4j/
ini4j-0.5.4.jar : https://sourceforge.net/projects/ini4j/files/ini4j-bin/
jacocoagent-0.7.8.jar : http://www.eclemma.org/jacoco/
junit-4.12.jar : http://search.maven.org/#search|gav|1|g:"junit" AND a:"junit"
svnkit-1.8.10-complete.jar : see below
tagsoup-1.2.1.jar : http://home.ccil.org/~cowan/tagsoup/
utilMDE-20091207.jar : do not update
xom-1.2.10.jar : http://www.xom.nu/

Two libraries are nonstandard:

BCEL (bcel.jar)
- Java class file reader/writer
- Git repository: https://github.com/typetools/commons-bcel.git
- contains type annotations compared to upstream repository at
  https://github.com/codespecs/commons-bcel, which contains a bug fix compared
  to its upstream repository at https://github.com/apache/commons-bcel
- to build (must be done using JDK 7, not JDK 8):
    git clone https://github.com/typetools/commons-bcel.git
    cd commons-bcel
    git pull https://github.com/codespecs/commons-bcel.git
    # Now, resolve any conflicts before running the next command.
    git push
    # The below command uses the the current Checker Framework from the
    # version control repository.  To use the latest released version of the
    # Checker Framework, instead run:
    #   mvn versions:use-latest-versions -Dincludes="org.checkerframework:*"
    #   mvn clean verify
    mvn clean verify -P checkerframework-local
    \cp -pf target/commons-bcel6-6.0-SNAPSHOT.jar ../bcel.jar
    cd ..
    rm -rf commons-bcel

svnkit-1.8.10-complete.jar: for use by MultiVersionControl program
To create the file, I ran the following commands:
  cd ~/tmp
  wget http://www.svnkit.com/org.tmatesoft.svn_1.8.10.standalone.zip
  unzip org.tmatesoft.svn_1.8.10.standalone.zip
  cd svnkit-1.8.10/lib
  mkdir jar-contents
  cd jar-contents
  for file in ../*.jar; do
    jar xf $file;
  done
  find * -type f | $pl/bin/sort-directory-order > jar-contents.txt
  jar cf ../svnkit-1.8.10-complete.jar @jar-contents.txt
  cd ..
  /rm -rf jar-contents
  mv svnkit-1.8.10-complete.jar $pl/java/lib
  cd ~/tmp
  \rm -rf org.tmatesoft.svn_1.8.10.standalone.zip svnkit-1.8.10
