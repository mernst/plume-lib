This readme is intended for plume-lib developers.
The main plume-lib documentation is in file README.html .


--Making a release--

To make a plume-lib release and upload it to GitHub:

1. Commit or stash any changes in your copy of the plume-lib repository.

2. For each .jar file in plume-lib/java/lib/, if a more recent version is
available, replace the out-of-date one.  Update file names in files
plume-lib/java/.classpath and (in 2 places) plume-lib/java/Makefile .
(Question: where did I obtain, or how did I make, svnkit-1.8.10-complete.jar?)

3. Browse to each URL in plume-lib/bin/checklink-args.txt and remove any
that are not valid.
Something like this could work (to avoid doing all of the URLs in one go,
which might overpower your browser):
  (defun browse-url-checklink (number-prefix)
    (find-file "bin/checklink-args.txt")
    (goto-char (point-min))
    (browse-url-once-if-matched (concat number-prefix ":\\(http.*\\)") 1))
  (browse-url-checklink "0")
  (browse-url-checklink "1")
  (browse-url-checklink "2")
  (browse-url-checklink "3")
  (browse-url-checklink "4")
  (browse-url-checklink "5")
  (browse-url-checklink "6")
  (browse-url-checklink "[^0-6]")

4. Update changelog.txt.  To help writing the text, run a command such as:

    git log

to view the changes since the last release, or 

    git diff v1.0.5..HEAD

to see the changes.  To find new files, do
  git log --pretty=oneline --name-status
and look for lines starting with "A " early in the output.
Ensure that the main documentation at index.html in the gh-pages branch
documents any new files.

5. Push the changes in your copy of the plume-lib repository.

6. Run the make-plume-release script located in plume-lib/bin:

    cd plume-lib
    bin/make-plume-release x.y.z

where x.y.z is the intended new version number of the release.

The script requires that $JAVAC or 'javac' point to the JSR 308 compiler.
If this is the case, then the release is built and the test cases are run.  The
release should be Java 5 compatible.

You will be asked if you want artifacts generated by this release to be uploaded
to GitHub automatically.  If so, you will be prompted to enter your GitHub
username and password.

7. Check that the artifacts were successfully uploaded to GitHub, or upload
them manually.

8. Update the web version of the Javadoc.  On a machine connected to the UW
CSE file system:

    cd $pl/java
    hg fetch
    make javadoc-publish

This step can be done even without making a new release.

9. Push the new Git tag created by the script to the repository:

    git push --tags
